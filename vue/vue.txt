Vue.js             # cdn <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

Structure
---------
Vue.createApp({    
    data() {	   
        return {   # inside return{} is where the reactive state is defined
		           # every key-value pair here becomes reactive
	    }      	   # vue will update the DOM upon any changes here
    },
    watch: {       # watchers are methods "watching" a data property
                   # these methods are not called on, they watch data and execute if a condition is met
                   # ie: watching a registration form - actively updating, displaying whether user has each field correctly inputted
    },
    computed: {    # computed properties are written like methods 
                   # they are updated automatically when a dependency changes
                   # ie:   
    },              
    methods: {     # unlike computed properties, methods need to be called on, ie: through event handling
                   # declared like methods in a js object
    }              # ie: addTask() {...} called by -> <button @click="addTask">add</button>
  
}).mount('')       # vue apps are mounted to html elements - ie: .mount('body') / .mount('#app')


Core Concepts
-------------
[concept] - [what it does] - ie: []

{{ }} - output data - ie: {{ message }}
      # this is text interpolation
      # simple javascript expressions can also be written inside

v-model - two way binding - ie: <input v-model="name">

v-bind - binds attributes - ie: <img v-bind:src="imgURL"> / :src="imgURL"

v-on - event listener - ie: <button v-on:click="doThing"> / @click="doThing"

v-if - conditional rendering - ie: <p v-if="loggedIn">Welcome!</p>
     # this element is added/removed from the DOM - rendered conditionally

v-show - toggle visibility - ie: <p v-show="show">Hello World</p>
       # this element is always rendered - css controls visibility (ie: display: none)
       # useful for repetitive toggling - ie: dropdown menu

v-for - looping - ie: <li v-for="item in items">{{ item }}</li>
      # <p v-for="(item, index) in items"></p> allows for accessing {{ index }} of array element
          # best practice is adding :key="index" to help vue keep track of which item is which in the loop & avoid bugs

v-show - toggle visibility of element - ie: <div v-show="lightSwitch">words</div>
       # you can code a button with v-on:click="lightSwitch = !lightSwitch" / @click=""
       # lightSwitch changing states from true/false will view/hide the element


Concepts Cont.
-------------
v-if vs v-show - both control visibility in very different ways
               # v-if - element will not render in DOM if condition is false
               # v-show - display/hide with css - element is in DOM regardless


Vue SFC from CLI - Vite
-----------------------
# npm create vite@latest
- cd into vue app directory after creating project
# npm install - install dependencies
# npm run dev - start dev server


Single File Components (SFC)
----------------------------
- all .vue files consist of <template>, <script> and <style>
    - template for html code
    - script for vue code
    - style for css code


main.js
--------
- main.js is responsible for:
    importing vue # import { createApp } from 'vue'
    creating the app # import App from './App.vue' | const app = createApp(App)
    mounting it to a DOM element # app.mount('#app')
    setting up global plugins, routers, stores, etc.


Components
----------
- stored inside /src/components, as .vue files, in PascalCase
- components work as reusable pieces of code, encapsulating elements of ui
    - great for organization and scalability
- ie: UserCard.vue is a component that displays a card with a name and bio
    - components can accept parent data through props, optimizing reusability while DRY
    - passing props to a card component streamlines building ui - very noticeably as the app grows


Dynamic Components
-------------------
- used for displaying only specific components in the SPA
- <component :is=""> is used to represent the active component with the value/name tied to v-bind:is


Styling
--------
- inline - ie: <div v-bind:style="{ backgroundColor: 'orange', 'font-weight': 'bolder' }">
    - camelCase for properties is preferred - kebab-case does work if written inside quotes
- internal/external - ie: <div v-bind:class="{  }"></div>
- scoped - styling in components stays local
    - ie: <style scoped></style> contains all styles locally instead of globally
    - .container/.wrapper can be styled as unique classes if each <style> is scoped


Refs
-----
- refers to specific DOM elements - ref attribute on a html tag adds the element to the $refs object
- ref attribute & $refs object work as an alternative to JS methods like getElementById() or querySelector()
    # ie:


Routing
--------



Lifecycle Hooks
----------------
mounted - called right after a component is added to the DOM - options api
    # from vue2, good for small projects - not optimal
onMounted - called right after a component is added to the DOM - composition api
    # from vue3, more flexible and scalable - cleaner in <script setup> & for organizing logic by feature

beforeCreate


Structure Cont.
----------------
watch: {
    deep: true - used when watching a nested object/array and want to watch changes within
               # normally, watchers only trigger by direct reference changes - ie: redefining an array
               # internal mutation (ie: push to array) does not trigger the watcher without deep: true
}


Packages
---------
vue-i18n - multilingual web app support












